// MIT License

// Copyright (c) 2025 Natchaphol Chumpanin (Account name as Perinetus)

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//@version=5
indicator("2xHLV In 1 Out", overlay=true)

// IND-1hT50-ser_I2_H_L_chV_ratioV-Conv64_1-ReLU-Flat-Dense2-ReLU-O1F0H_L-b16e5-R8824

// === Input: 2 time steps Ã— 3 features ===
h1 = high[1], l1 = low[1], v1 = volume[1]
h0 = high,   l0 = low, v0 = volume

// === Normalize (MinMaxScaler logic) ===
min_val = math.min(math.min(h0, l0), math.min(h1, l1))
max_val = math.max(math.max(h0, l0), math.max(h1, l1))
range_val = math.max(max_val - min_val, 1e-9)

in0 = (h1 - min_val) / range_val
in1 = (l1 - min_val) / range_val
in2 = (h0 - min_val) / range_val
in3 = (l0 - min_val) / range_val
in4 = 0
in5 = v0 / math.max(1e-9, v1)

if (v1 > v0)
    in4 := 1
    in5 := v1 / math.max(1e-9, v0)   

// === Model Offset as 0 ===

// === Conv1D Output with ReLU ===
HLchV0F_f0 = math.max((-0.33318600 * in0) + (0.55388474 * in1) + (0.00797025 * in2) + (0.55417168 * in3) + (0.10782293 * in4) + (0.14755996 * in5) + -0.22933097, 0)
HLchV0F_f1 = math.max((0.31627619 * in0) + (-0.30790484 * in1) + (0.09534779 * in2) + (-1.07333136 * in3) + (0.11577292 * in4) + (-0.34170216 * in5) + -0.01310374, 0)
HLchV0F_f2 = math.max((0.22962122 * in0) + (-0.26997113 * in1) + (0.40605897 * in2) + (0.06567733 * in3) + (0.12308916 * in4) + (0.12302267 * in5) + -0.17413896, 0)
HLchV0F_f3 = math.max((0.27615532 * in0) + (0.02404850 * in1) + (-5.65961218 * in2) + (-0.04180257 * in3) + (-0.03487841 * in4) + (-0.14105614 * in5) + 0.09020369, 0)
HLchV0F_f4 = math.max((-0.03184668 * in0) + (-0.03516129 * in1) + (-0.34072748 * in2) + (-0.00708577 * in3) + (0.20420355 * in4) + (-0.14061861 * in5) + 0.31457463, 0)
HLchV0F_f5 = math.max((-0.00137515 * in0) + (-0.29281583 * in1) + (0.01287626 * in2) + (-0.27246395 * in3) + (0.34412616 * in4) + (0.00587536 * in5) + -0.03881329, 0)
HLchV0F_f6 = math.max((-0.08410902 * in0) + (0.06074442 * in1) + (-0.16352262 * in2) + (-0.12725876 * in3) + (-0.09110694 * in4) + (-0.28014448 * in5) + -0.06384044, 0)
HLchV0F_f7 = math.max((0.18047640 * in0) + (0.31712544 * in1) + (0.23612289 * in2) + (0.28921890 * in3) + (-0.00061456 * in4) + (-0.05199665 * in5) + -0.39982551, 0)
HLchV0F_f8 = math.max((-0.04421634 * in0) + (-0.40128848 * in1) + (0.12381240 * in2) + (0.03139113 * in3) + (0.09416301 * in4) + (-0.42202750 * in5) + 0.10349007, 0)
HLchV0F_f9 = math.max((0.03849133 * in0) + (-0.72971874 * in1) + (-0.02715763 * in2) + (-0.65105265 * in3) + (0.07546177 * in4) + (0.13576603 * in5) + 0.39025956, 0)
HLchV0F_f10 = math.max((0.25102851 * in0) + (-0.42426163 * in1) + (-0.22775656 * in2) + (-0.02073257 * in3) + (0.00993482 * in4) + (0.03391780 * in5) + 0.28132159, 0)
HLchV0F_f11 = math.max((0.00792992 * in0) + (0.59470761 * in1) + (0.00607296 * in2) + (0.54239464 * in3) + (0.00852098 * in4) + (-0.05873611 * in5) + -0.43499121, 0)
HLchV0F_f12 = math.max((0.37251806 * in0) + (-0.03244707 * in1) + (0.36179325 * in2) + (-0.08056910 * in3) + (0.22310866 * in4) + (-0.05605989 * in5) + -0.19170181, 0)
HLchV0F_f13 = math.max((-0.90329254 * in0) + (-0.01523724 * in1) + (-0.83790171 * in2) + (-0.04020372 * in3) + (0.04333193 * in4) + (-0.02664088 * in5) + 0.72322547, 0)
HLchV0F_f14 = math.max((0.18200405 * in0) + (0.24658409 * in1) + (0.09373462 * in2) + (-0.68476284 * in3) + (-0.08525801 * in4) + (0.21281520 * in5) + 0.04760594, 0)
HLchV0F_f15 = math.max((0.48701531 * in0) + (-0.00495417 * in1) + (0.43235070 * in2) + (0.01814104 * in3) + (-0.00179798 * in4) + (-0.07667641 * in5) + -0.31822249, 0)
HLchV0F_f16 = math.max((0.01157692 * in0) + (0.42518944 * in1) + (-0.13649413 * in2) + (0.19252008 * in3) + (0.20320313 * in4) + (0.05203283 * in5) + -0.09064400, 0)
HLchV0F_f17 = math.max((-0.14048937 * in0) + (-0.35953787 * in1) + (0.26851749 * in2) + (-0.08015671 * in3) + (0.22083445 * in4) + (-0.01791033 * in5) + 0.33463794, 0)
HLchV0F_f18 = math.max((0.27683404 * in0) + (0.24466841 * in1) + (0.22017714 * in2) + (0.45791340 * in3) + (0.02999577 * in4) + (0.10868523 * in5) + -0.18806353, 0)
HLchV0F_f19 = math.max((-0.08230469 * in0) + (-0.09328002 * in1) + (-0.16680279 * in2) + (-0.06772894 * in3) + (-0.31773332 * in4) + (0.10636918 * in5) + 0.20844784, 0)
HLchV0F_f20 = math.max((0.07474166 * in0) + (0.47330934 * in1) + (0.17418139 * in2) + (0.05713720 * in3) + (0.05451012 * in4) + (0.27786493 * in5) + -0.18506363, 0)
HLchV0F_f21 = math.max((0.20914134 * in0) + (0.00890599 * in1) + (-3.36072135 * in2) + (-0.03200758 * in3) + (-0.05484502 * in4) + (-0.10627263 * in5) + 0.06227385, 0)
HLchV0F_f22 = math.max((0.48922035 * in0) + (0.02179061 * in1) + (0.45673943 * in2) + (0.00672297 * in3) + (-0.01632803 * in4) + (0.02538272 * in5) + -0.40787414, 0)
HLchV0F_f23 = math.max((-0.26081234 * in0) + (0.17284523 * in1) + (0.02247101 * in2) + (0.27364013 * in3) + (-0.22126126 * in4) + (0.09600285 * in5) + 0.17413329, 0)
HLchV0F_f24 = math.max((0.28498489 * in0) + (-0.22009026 * in1) + (0.00781983 * in2) + (-0.02262478 * in3) + (-0.29249951 * in4) + (-0.10481624 * in5) + 0.28598455, 0)
HLchV0F_f25 = math.max((-0.02257171 * in0) + (-0.30015451 * in1) + (-0.01703520 * in2) + (-0.32220647 * in3) + (-0.01808123 * in4) + (0.04064736 * in5) + 0.35278279, 0)
HLchV0F_f26 = math.max((-0.05131709 * in0) + (-0.42760608 * in1) + (0.31981519 * in2) + (-0.13343227 * in3) + (0.01256424 * in4) + (0.17435050 * in5) + 0.12602675, 0)
HLchV0F_f27 = math.max((0.02836362 * in0) + (-0.16683166 * in1) + (0.02376613 * in2) + (0.04103938 * in3) + (-0.04627637 * in4) + (0.03713585 * in5) + 0.17855173, 0)
HLchV0F_f28 = math.max((-0.16361496 * in0) + (-0.21118575 * in1) + (-0.17490211 * in2) + (-0.10876452 * in3) + (0.14721173 * in4) + (0.15271391 * in5) + 0.37912259, 0)
HLchV0F_f29 = math.max((-2.24575090 * in0) + (-0.09348274 * in1) + (0.23865901 * in2) + (-0.10138474 * in3) + (-0.02725195 * in4) + (-0.21222341 * in5) + 0.23122522, 0)
HLchV0F_f30 = math.max((0.10872630 * in0) + (0.27528268 * in1) + (-0.02429153 * in2) + (0.19449535 * in3) + (-0.02876004 * in4) + (0.19307892 * in5) + -0.25457087, 0)
HLchV0F_f31 = math.max((-0.10876503 * in0) + (-0.18429014 * in1) + (0.03911412 * in2) + (-0.14014445 * in3) + (-0.04883749 * in4) + (0.04803817 * in5) + 0.31828228, 0)
HLchV0F_f32 = math.max((0.29101354 * in0) + (0.39413092 * in1) + (-0.08773290 * in2) + (0.42287266 * in3) + (0.00403572 * in4) + (0.08453979 * in5) + -0.35298038, 0)
HLchV0F_f33 = math.max((-0.04673758 * in0) + (-4.05325603 * in1) + (0.02638469 * in2) + (0.30976123 * in3) + (-0.01600444 * in4) + (-0.09653100 * in5) + 0.08515062, 0)
HLchV0F_f34 = math.max((-0.18505716 * in0) + (-0.08054061 * in1) + (-0.04962072 * in2) + (-0.10920396 * in3) + (-0.11911114 * in4) + (-0.02314579 * in5) + 0.00000000, 0)
HLchV0F_f35 = math.max((-0.22380745 * in0) + (-0.07827398 * in1) + (-0.27473745 * in2) + (0.00584352 * in3) + (0.04002118 * in4) + (0.14726937 * in5) + 0.29213202, 0)
HLchV0F_f36 = math.max((-0.04984467 * in0) + (-0.14569719 * in1) + (0.11971246 * in2) + (-0.13525368 * in3) + (-0.04988927 * in4) + (-0.32414633 * in5) + -0.08828054, 0)
HLchV0F_f37 = math.max((0.31287447 * in0) + (0.06015200 * in1) + (0.29638815 * in2) + (-0.08811700 * in3) + (0.04034358 * in4) + (0.24231687 * in5) + -0.25468692, 0)
HLchV0F_f38 = math.max((0.16646689 * in0) + (-3.37793326 * in1) + (0.05665816 * in2) + (-3.13312817 * in3) + (0.03549792 * in4) + (-0.00637609 * in5) + 0.07873237, 0)
HLchV0F_f39 = math.max((0.28271160 * in0) + (-0.03999684 * in1) + (0.29463947 * in2) + (-0.03110871 * in3) + (-0.23486486 * in4) + (-0.12743235 * in5) + -0.02047977, 0)
HLchV0F_f40 = math.max((0.29088247 * in0) + (-0.26823658 * in1) + (-0.09376396 * in2) + (0.21168812 * in3) + (0.04792175 * in4) + (0.08626717 * in5) + -0.07539455, 0)
HLchV0F_f41 = math.max((-0.11221101 * in0) + (0.19412318 * in1) + (-0.17640397 * in2) + (0.20270608 * in3) + (-0.04722925 * in4) + (-0.28195256 * in5) + 0.20896909, 0)
HLchV0F_f42 = math.max((-0.00764208 * in0) + (0.36895150 * in1) + (-0.42551509 * in2) + (0.16887861 * in3) + (-0.18226668 * in4) + (0.07870945 * in5) + 0.17575561, 0)
HLchV0F_f43 = math.max((-0.18664177 * in0) + (0.02646091 * in1) + (0.24665684 * in2) + (-0.39456040 * in3) + (-0.20858231 * in4) + (-0.01841190 * in5) + 0.22382431, 0)
HLchV0F_f44 = math.max((-0.03047467 * in0) + (0.34085226 * in1) + (-0.07762590 * in2) + (-4.12901115 * in3) + (0.00743203 * in4) + (-0.20042388 * in5) + 0.13646661, 0)
HLchV0F_f45 = math.max((0.21982460 * in0) + (-0.04190907 * in1) + (-0.13833874 * in2) + (-0.36050195 * in3) + (0.07264193 * in4) + (0.27469331 * in5) + 0.19559941, 0)
HLchV0F_f46 = math.max((-0.01627466 * in0) + (-0.73922384 * in1) + (-0.01716552 * in2) + (-0.67219090 * in3) + (0.00682047 * in4) + (0.04041394 * in5) + 0.56521285, 0)
HLchV0F_f47 = math.max((0.35926095 * in0) + (0.13135143 * in1) + (0.31345403 * in2) + (0.03994762 * in3) + (0.11604483 * in4) + (-0.02335843 * in5) + -0.30584189, 0)
HLchV0F_f48 = math.max((-0.27226061 * in0) + (-0.08802282 * in1) + (-0.09349234 * in2) + (0.14813381 * in3) + (0.02021661 * in4) + (0.08048806 * in5) + 0.31401536, 0)
HLchV0F_f49 = math.max((0.18220638 * in0) + (-0.01137902 * in1) + (0.01608946 * in2) + (-0.45543510 * in3) + (0.06278549 * in4) + (0.23201451 * in5) + 0.14048953, 0)
HLchV0F_f50 = math.max((-3.74547148 * in0) + (0.02316283 * in1) + (0.33632347 * in2) + (0.05852942 * in3) + (-0.00575067 * in4) + (-0.16278827 * in5) + 0.01854769, 0)
HLchV0F_f51 = math.max((0.42026660 * in0) + (-0.39564776 * in1) + (0.15299790 * in2) + (-0.20531844 * in3) + (0.11676607 * in4) + (0.16659889 * in5) + 0.17092323, 0)
HLchV0F_f52 = math.max((-0.20337448 * in0) + (0.28883234 * in1) + (-0.27996740 * in2) + (0.26364708 * in3) + (0.13039561 * in4) + (-0.11845329 * in5) + 0.28376085, 0)
HLchV0F_f53 = math.max((-0.23715071 * in0) + (0.03847764 * in1) + (-0.41953793 * in2) + (0.04472264 * in3) + (0.17934950 * in4) + (0.19042547 * in5) + 0.25147188, 0)
HLchV0F_f54 = math.max((-3.42876148 * in0) + (0.06973997 * in1) + (-3.29610944 * in2) + (0.08556189 * in3) + (-0.03305322 * in4) + (0.04851750 * in5) + 0.10073449, 0)
HLchV0F_f55 = math.max((-1.61243081 * in0) + (0.14953490 * in1) + (-1.81302071 * in2) + (0.15301611 * in3) + (0.13670550 * in4) + (-0.12542845 * in5) + 0.04104770, 0)
HLchV0F_f56 = math.max((-0.05544877 * in0) + (-0.23400627 * in1) + (-0.00738730 * in2) + (0.05136012 * in3) + (-0.17076358 * in4) + (-0.10714347 * in5) + -0.05025268, 0)
HLchV0F_f57 = math.max((-0.34634268 * in0) + (0.20922641 * in1) + (-0.03212321 * in2) + (-0.35581335 * in3) + (0.00199560 * in4) + (0.06224243 * in5) + 0.35638535, 0)
HLchV0F_f58 = math.max((-0.08556332 * in0) + (-0.01496487 * in1) + (-0.04923399 * in2) + (-0.22356354 * in3) + (0.13783753 * in4) + (0.00982670 * in5) + 0.15347296, 0)
HLchV0F_f59 = math.max((0.06878423 * in0) + (-0.08061922 * in1) + (-0.02057523 * in2) + (-0.28619894 * in3) + (-0.13033631 * in4) + (-0.31597981 * in5) + -0.08390739, 0)
HLchV0F_f60 = math.max((-0.40631485 * in0) + (-0.12577362 * in1) + (-0.28738621 * in2) + (0.01659127 * in3) + (0.17427833 * in4) + (0.29740357 * in5) + 0.29720283, 0)
HLchV0F_f61 = math.max((0.29527983 * in0) + (0.17202224 * in1) + (0.02502112 * in2) + (0.43472710 * in3) + (-0.00102165 * in4) + (-0.03743047 * in5) + -0.36284098, 0)
HLchV0F_f62 = math.max((-0.26481202 * in0) + (-0.00481462 * in1) + (-0.07327975 * in2) + (-0.27200902 * in3) + (-0.01108988 * in4) + (-0.11873887 * in5) + -0.01353541, 0)
HLchV0F_f63 = math.max((-0.06994483 * in0) + (-0.02279387 * in1) + (0.08667991 * in2) + (-0.01061295 * in3) + (-0.06550315 * in4) + (-0.20330374 * in5) + -0.09310901, 0)

// === Dense Output with ReLU ===
HLchV0F_out0 = math.max((0.01635772 * HLchV0F_f0) + (0.04289339 * HLchV0F_f1) + (-0.31990790 * HLchV0F_f2) + (0.78921759 * HLchV0F_f3) + (0.22430207 * HLchV0F_f4) + (-0.00002754 * HLchV0F_f5) + (-0.25823840 * HLchV0F_f6) + (-0.49945948 * HLchV0F_f7) + (0.20215678 * HLchV0F_f8) + (-0.11498201 * HLchV0F_f9) + (-0.01980474 * HLchV0F_f10) + (0.03072933 * HLchV0F_f11) + (-0.45144618 * HLchV0F_f12) + (-1.13958919 * HLchV0F_f13) + (-0.23531644 * HLchV0F_f14) + (-1.12778759 * HLchV0F_f15) + (0.03785070 * HLchV0F_f16) + (0.09549277 * HLchV0F_f17) + (-0.16467778 * HLchV0F_f18) + (0.23565643 * HLchV0F_f19) + (-0.10878792 * HLchV0F_f20) + (0.41836828 * HLchV0F_f21) + (-1.15855348 * HLchV0F_f22) + (0.26144764 * HLchV0F_f23) + (-0.03726401 * HLchV0F_f24) + (0.48908564 * HLchV0F_f25) + (-0.07825381 * HLchV0F_f26) + (0.02648947 * HLchV0F_f27) + (0.49656013 * HLchV0F_f28) + (0.51334953 * HLchV0F_f29) + (-0.13860956 * HLchV0F_f30) + (0.26940781 * HLchV0F_f31) + (-0.22194242 * HLchV0F_f32) + (-0.08542577 * HLchV0F_f33) + (0.05648607 * HLchV0F_f34) + (0.25024819 * HLchV0F_f35) + (-0.20463517 * HLchV0F_f36) + (-0.29383898 * HLchV0F_f37) + (-0.28206921 * HLchV0F_f38) + (-0.29318163 * HLchV0F_f39) + (-0.25548050 * HLchV0F_f40) + (0.35531083 * HLchV0F_f41) + (0.37637985 * HLchV0F_f42) + (0.09154615 * HLchV0F_f43) + (0.03221910 * HLchV0F_f44) + (0.04448409 * HLchV0F_f45) + (0.01051565 * HLchV0F_f46) + (-0.44257775 * HLchV0F_f47) + (0.28770110 * HLchV0F_f48) + (-0.02305528 * HLchV0F_f49) + (0.51351494 * HLchV0F_f50) + (-0.16868165 * HLchV0F_f51) + (0.54318976 * HLchV0F_f52) + (0.44649726 * HLchV0F_f53) + (-0.99864680 * HLchV0F_f54) + (-0.69999361 * HLchV0F_f55) + (0.07383531 * HLchV0F_f56) + (0.22910668 * HLchV0F_f57) + (0.04414846 * HLchV0F_f58) + (-0.23557617 * HLchV0F_f59) + (0.41981030 * HLchV0F_f60) + (-0.24396107 * HLchV0F_f61) + (0.18392174 * HLchV0F_f62) + (-0.19826069 * HLchV0F_f63) + 0.21428318, 0)
HLchV0F_out1 = math.max((-0.56943005 * HLchV0F_f0) + (-0.53641915 * HLchV0F_f1) + (0.09459741 * HLchV0F_f2) + (0.12670764 * HLchV0F_f3) + (0.08804770 * HLchV0F_f4) + (0.25303197 * HLchV0F_f5) + (-0.21461727 * HLchV0F_f6) + (-0.60987395 * HLchV0F_f7) + (0.08315591 * HLchV0F_f8) + (-0.79351908 * HLchV0F_f9) + (0.44342047 * HLchV0F_f10) + (-1.22277176 * HLchV0F_f11) + (0.17120947 * HLchV0F_f12) + (-0.00949054 * HLchV0F_f13) + (0.30308092 * HLchV0F_f14) + (0.11808784 * HLchV0F_f15) + (-0.28435349 * HLchV0F_f16) + (0.23051196 * HLchV0F_f17) + (-0.39952433 * HLchV0F_f18) + (0.13344009 * HLchV0F_f19) + (-0.18789095 * HLchV0F_f20) + (0.16124345 * HLchV0F_f21) + (0.05201066 * HLchV0F_f22) + (-0.06167181 * HLchV0F_f23) + (0.33485761 * HLchV0F_f24) + (0.57320923 * HLchV0F_f25) + (0.23155664 * HLchV0F_f26) + (0.17043146 * HLchV0F_f27) + (0.44761464 * HLchV0F_f28) + (0.32505822 * HLchV0F_f29) + (-0.44628754 * HLchV0F_f30) + (0.41773206 * HLchV0F_f31) + (-0.48677474 * HLchV0F_f32) + (0.83100122 * HLchV0F_f33) + (-0.15574858 * HLchV0F_f34) + (0.09476544 * HLchV0F_f35) + (-0.07588917 * HLchV0F_f36) + (-0.09327385 * HLchV0F_f37) + (-1.21759105 * HLchV0F_f38) + (0.16784182 * HLchV0F_f39) + (0.15573262 * HLchV0F_f40) + (0.01885483 * HLchV0F_f41) + (-0.06250405 * HLchV0F_f42) + (0.09236702 * HLchV0F_f43) + (0.64642984 * HLchV0F_f44) + (0.26349872 * HLchV0F_f45) + (-1.08674681 * HLchV0F_f46) + (-0.06569266 * HLchV0F_f47) + (0.20584284 * HLchV0F_f48) + (0.29257303 * HLchV0F_f49) + (-0.07919242 * HLchV0F_f50) + (0.24684949 * HLchV0F_f51) + (-0.19373952 * HLchV0F_f52) + (0.05218573 * HLchV0F_f53) + (-0.31199345 * HLchV0F_f54) + (-0.18182904 * HLchV0F_f55) + (-0.18683438 * HLchV0F_f56) + (0.27834535 * HLchV0F_f57) + (0.16596082 * HLchV0F_f58) + (-0.05338627 * HLchV0F_f59) + (0.17468537 * HLchV0F_f60) + (-0.39323857 * HLchV0F_f61) + (-0.28421032 * HLchV0F_f62) + (-0.12593597 * HLchV0F_f63) + 0.22846876, 0)

// === Denormalize ===
next_high0  = HLchV0F_out0 * range_val + min_val
next_low0 = HLchV0F_out1 * range_val + min_val

// === Plot the Differences ===
plot(next_high0, title="Predicted High 0", color=color.new(color.blue, 0), linewidth=2, offset=1)
plot(next_low0, title="Predicted Low 0", color=color.new(color.purple, 0), linewidth=2, offset=1)
