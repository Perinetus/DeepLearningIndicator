// MIT License

// Copyright (c) 2025 Natchaphol Chumpanin

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//@version=5
indicator("2xHLV In 1xHL Out", overlay=true)

// IND-1hT50-ser_I2_H_L_chV_ratioV-Conv64_1-ReLU-Flat-Dense2-ReLU-O1F0_H_L-b64e5-R8824

// === Input: 2 time steps Ã— 3 features ===
h1 = high[1], l1 = low[1], v1 = volume[1]
h0 = high,   l0 = low, v0 = volume

// === Normalize (MinMaxScaler logic) ===
min_val = math.min(math.min(h0, l0), math.min(h1, l1))
max_val = math.max(math.max(h0, l0), math.max(h1, l1))
range_val = math.max(max_val - min_val, 1e-9)

in0 = (h1 - min_val) / range_val
in1 = (l1 - min_val) / range_val
in2 = (h0 - min_val) / range_val
in3 = (l0 - min_val) / range_val
in4 = 0
in5 = v0 / math.max(1, v1)

if (v1 > v0)
    in4 := 1
    in5 := v1 / math.max(1, v0)   

// === Model Offset as 0 ===

// === Conv1D Output with ReLU ===
HLchV0F_f0 = math.max((-4.53590822 * in0) + (-0.00462866 * in1) + (0.38782433 * in2) + (-0.00416077 * in3) + (0.00594365 * in4) + (-0.03680490 * in5) + 0.03450387, 0)
HLchV0F_f1 = math.max((-0.20551251 * in0) + (0.37163159 * in1) + (0.02529228 * in2) + (-0.50608069 * in3) + (-0.01901189 * in4) + (0.10158070 * in5) + 0.08593456, 0)
HLchV0F_f2 = math.max((0.05650888 * in0) + (0.36845672 * in1) + (-0.12388399 * in2) + (0.37526664 * in3) + (-0.01989295 * in4) + (-0.04141946 * in5) + -0.20190553, 0)
HLchV0F_f3 = math.max((0.11800351 * in0) + (0.08347593 * in1) + (0.37115890 * in2) + (0.17720112 * in3) + (0.17976892 * in4) + (0.08110625 * in5) + -0.11526791, 0)
HLchV0F_f4 = math.max((0.41138458 * in0) + (-0.11119328 * in1) + (0.35899144 * in2) + (-0.12938602 * in3) + (0.09348638 * in4) + (0.17436983 * in5) + -0.15805878, 0)
HLchV0F_f5 = math.max((0.01755827 * in0) + (0.55151284 * in1) + (0.01456804 * in2) + (0.52270830 * in3) + (-0.00185046 * in4) + (-0.11781289 * in5) + -0.39169452, 0)
HLchV0F_f6 = math.max((0.00200328 * in0) + (0.32719120 * in1) + (-0.01406338 * in2) + (-4.50767756 * in3) + (0.02006865 * in4) + (-0.23160774 * in5) + 0.10360648, 0)
HLchV0F_f7 = math.max((-0.08390118 * in0) + (-0.23603602 * in1) + (-0.19658934 * in2) + (-0.17817907 * in3) + (0.03233391 * in4) + (0.29657784 * in5) + 0.15944096, 0)
HLchV0F_f8 = math.max((-0.23595388 * in0) + (0.02779207 * in1) + (0.01309633 * in2) + (-0.29598624 * in3) + (-0.00587549 * in4) + (-0.09807756 * in5) + -0.04341495, 0)
HLchV0F_f9 = math.max((0.33844152 * in0) + (-0.19626625 * in1) + (0.40701792 * in2) + (-0.11740165 * in3) + (-0.01915843 * in4) + (0.01132300 * in5) + 0.02494167, 0)
HLchV0F_f10 = math.max((0.34829688 * in0) + (0.08927425 * in1) + (0.47048166 * in2) + (-0.28412023 * in3) + (-0.04668601 * in4) + (0.17198038 * in5) + -0.04448986, 0)
HLchV0F_f11 = math.max((-0.99128461 * in0) + (-0.03155477 * in1) + (-0.88605809 * in2) + (0.03431875 * in3) + (0.07101669 * in4) + (0.09221826 * in5) + 0.60984725, 0)
HLchV0F_f12 = math.max((-0.29053491 * in0) + (0.39897883 * in1) + (-0.28207064 * in2) + (0.39185748 * in3) + (-0.05528479 * in4) + (0.32899565 * in5) + 0.05701098, 0)
HLchV0F_f13 = math.max((-0.01250283 * in0) + (0.49889198 * in1) + (0.03004291 * in2) + (0.44367459 * in3) + (-0.02566186 * in4) + (0.04798222 * in5) + -0.42249778, 0)
HLchV0F_f14 = math.max((-0.01427168 * in0) + (-0.64064080 * in1) + (-0.01512457 * in2) + (-0.61719161 * in3) + (0.00860061 * in4) + (0.03083495 * in5) + 0.54653978, 0)
HLchV0F_f15 = math.max((0.25869262 * in0) + (0.00439800 * in1) + (-4.77318954 * in2) + (0.00280719 * in3) + (-0.00320047 * in4) + (-0.00645152 * in5) + 0.01356294, 0)
HLchV0F_f16 = math.max((0.27204281 * in0) + (0.09173779 * in1) + (0.36086619 * in2) + (0.30523002 * in3) + (-0.06001056 * in4) + (0.22371982 * in5) + -0.26366302, 0)
HLchV0F_f17 = math.max((0.14841592 * in0) + (-0.07104064 * in1) + (0.23554008 * in2) + (0.22654831 * in3) + (-0.31798080 * in4) + (-0.11454423 * in5) + -0.31065145, 0)
HLchV0F_f18 = math.max((0.57320118 * in0) + (0.04079977 * in1) + (0.51917702 * in2) + (0.05263709 * in3) + (-0.00327960 * in4) + (-0.02447757 * in5) + -0.47267228, 0)
HLchV0F_f19 = math.max((-0.38557270 * in0) + (0.18467902 * in1) + (-0.04975926 * in2) + (-0.06798267 * in3) + (0.10653382 * in4) + (-0.42830098 * in5) + -0.02762471, 0)
HLchV0F_f20 = math.max((-0.29480866 * in0) + (0.00816871 * in1) + (-0.36521292 * in2) + (-0.06984738 * in3) + (0.00218372 * in4) + (0.10999280 * in5) + 0.36094376, 0)
HLchV0F_f21 = math.max((0.01621076 * in0) + (0.01566600 * in1) + (-0.18634176 * in2) + (-0.18478402 * in3) + (-0.05440852 * in4) + (0.12389900 * in5) + 0.31822330, 0)
HLchV0F_f22 = math.max((0.14304289 * in0) + (-0.16028327 * in1) + (-0.25218135 * in2) + (-0.00251295 * in3) + (-0.20983526 * in4) + (0.21195611 * in5) + 0.28391215, 0)
HLchV0F_f23 = math.max((0.19881332 * in0) + (-0.00063065 * in1) + (-5.04553795 * in2) + (-0.00145770 * in3) + (-0.00081359 * in4) + (-0.00600526 * in5) + 0.01035760, 0)
HLchV0F_f24 = math.max((-0.04821883 * in0) + (0.01480782 * in1) + (0.04673401 * in2) + (-0.20684722 * in3) + (-0.43190077 * in4) + (-0.07045492 * in5) + 0.36271542, 0)
HLchV0F_f25 = math.max((0.19228327 * in0) + (-0.08375368 * in1) + (0.05630070 * in2) + (0.06304530 * in3) + (0.14254981 * in4) + (0.14638931 * in5) + -0.16371059, 0)
HLchV0F_f26 = math.max((-0.05123517 * in0) + (-0.25368482 * in1) + (0.00171576 * in2) + (-0.27938762 * in3) + (0.39637154 * in4) + (-0.07182711 * in5) + 0.03510034, 0)
HLchV0F_f27 = math.max((0.18121041 * in0) + (0.05730050 * in1) + (-1.27088618 * in2) + (-0.11138003 * in3) + (-0.09898514 * in4) + (-0.22903343 * in5) + 0.15453084, 0)
HLchV0F_f28 = math.max((0.15511446 * in0) + (0.32721505 * in1) + (0.15402213 * in2) + (0.37560087 * in3) + (0.00263018 * in4) + (-0.10821957 * in5) + -0.36166632, 0)
HLchV0F_f29 = math.max((-0.05431744 * in0) + (0.04339216 * in1) + (-0.00616929 * in2) + (0.16425301 * in3) + (0.12583245 * in4) + (-0.08985416 * in5) + 0.17534854, 0)
HLchV0F_f30 = math.max((0.14923486 * in0) + (0.03470973 * in1) + (0.11705466 * in2) + (0.09536462 * in3) + (-0.10490561 * in4) + (0.09166017 * in5) + -0.08932488, 0)
HLchV0F_f31 = math.max((-0.11053262 * in0) + (-0.26611808 * in1) + (0.17380314 * in2) + (-0.22586225 * in3) + (0.23462993 * in4) + (0.24815977 * in5) + 0.10923346, 0)
HLchV0F_f32 = math.max((0.04139544 * in0) + (0.18657330 * in1) + (0.08800563 * in2) + (-0.02079761 * in3) + (-0.38546380 * in4) + (-0.33553252 * in5) + 0.02150973, 0)
HLchV0F_f33 = math.max((-0.00515501 * in0) + (0.44018725 * in1) + (0.24550347 * in2) + (0.20356126 * in3) + (-0.05225160 * in4) + (0.00225301 * in5) + -0.31016293, 0)
HLchV0F_f34 = math.max((0.02237316 * in0) + (0.49388796 * in1) + (0.01197199 * in2) + (0.47586268 * in3) + (0.00381164 * in4) + (-0.01766967 * in5) + -0.43043688, 0)
HLchV0F_f35 = math.max((0.27939168 * in0) + (0.11440694 * in1) + (0.18955152 * in2) + (0.17005640 * in3) + (0.08798143 * in4) + (-0.19820683 * in5) + -0.29859671, 0)
HLchV0F_f36 = math.max((0.05692483 * in0) + (0.31483746 * in1) + (-0.16150333 * in2) + (0.24448863 * in3) + (0.15709698 * in4) + (0.09531217 * in5) + -0.15407696, 0)
HLchV0F_f37 = math.max((-0.18714105 * in0) + (-0.07114312 * in1) + (0.02489848 * in2) + (-0.26877278 * in3) + (0.00134237 * in4) + (0.22798587 * in5) + 0.22908850, 0)
HLchV0F_f38 = math.max((-0.06059054 * in0) + (-0.13854435 * in1) + (0.13130970 * in2) + (0.05673917 * in3) + (-0.53800827 * in4) + (-0.06956436 * in5) + 0.32329127, 0)
HLchV0F_f39 = math.max((-0.00900885 * in0) + (-0.20634080 * in1) + (-0.57055569 * in2) + (-0.18341219 * in3) + (0.06306315 * in4) + (0.17139620 * in5) + -0.01985992, 0)
HLchV0F_f40 = math.max((0.12125050 * in0) + (-3.21441555 * in1) + (0.01366670 * in2) + (-3.41414952 * in3) + (0.00105424 * in4) + (-0.06461149 * in5) + 0.14551471, 0)
HLchV0F_f41 = math.max((0.11506019 * in0) + (-0.26119250 * in1) + (-0.15662467 * in2) + (0.14850870 * in3) + (0.29549354 * in4) + (-0.01936159 * in5) + 0.27860945, 0)
HLchV0F_f42 = math.max((-0.21709603 * in0) + (-0.19518499 * in1) + (0.22864427 * in2) + (-0.16477133 * in3) + (0.17805026 * in4) + (0.08133379 * in5) + 0.42303321, 0)
HLchV0F_f43 = math.max((0.00188812 * in0) + (-3.17502666 * in1) + (-0.02944876 * in2) + (0.25055569 * in3) + (-0.00350102 * in4) + (0.03311822 * in5) + -0.01644764, 0)
HLchV0F_f44 = math.max((0.06473602 * in0) + (-0.13179681 * in1) + (-0.09859201 * in2) + (-0.15222657 * in3) + (0.14318654 * in4) + (-0.28187722 * in5) + -0.12929292, 0)
HLchV0F_f45 = math.max((-0.04063920 * in0) + (-0.18874182 * in1) + (-0.00591349 * in2) + (0.02611362 * in3) + (0.23163138 * in4) + (-0.17315204 * in5) + 0.15812153, 0)
HLchV0F_f46 = math.max((0.25533211 * in0) + (-0.23152278 * in1) + (0.21582566 * in2) + (-0.30246183 * in3) + (0.06440674 * in4) + (0.15690015 * in5) + 0.16171671, 0)
HLchV0F_f47 = math.max((0.53000730 * in0) + (0.05145513 * in1) + (0.48158199 * in2) + (0.05429170 * in3) + (-0.00554675 * in4) + (0.03630120 * in5) + -0.49029228, 0)
HLchV0F_f48 = math.max((-0.31097457 * in0) + (0.06369741 * in1) + (-0.18333179 * in2) + (-0.06510452 * in3) + (-0.07245006 * in4) + (0.17763695 * in5) + 0.36078885, 0)
HLchV0F_f49 = math.max((-0.26487768 * in0) + (-0.01825457 * in1) + (0.04566839 * in2) + (0.03465412 * in3) + (0.34493217 * in4) + (-0.24539724 * in5) + 0.16112825, 0)
HLchV0F_f50 = math.max((-0.08994103 * in0) + (0.41053018 * in1) + (-0.10645865 * in2) + (0.21743760 * in3) + (0.12585583 * in4) + (-0.03431003 * in5) + -0.20695482, 0)
HLchV0F_f51 = math.max((-0.32812420 * in0) + (0.16811028 * in1) + (-0.10140781 * in2) + (0.12042427 * in3) + (-0.08000563 * in4) + (0.23018466 * in5) + 0.30208322, 0)
HLchV0F_f52 = math.max((0.15566055 * in0) + (-0.30499130 * in1) + (-0.35065258 * in2) + (-0.08916306 * in3) + (-0.00352722 * in4) + (0.19906324 * in5) + 0.22929651, 0)
HLchV0F_f53 = math.max((0.01213165 * in0) + (0.45070422 * in1) + (0.01289215 * in2) + (0.43000737 * in3) + (0.00083045 * in4) + (0.03694275 * in5) + -0.42154014, 0)
HLchV0F_f54 = math.max((0.11529797 * in0) + (-2.95840192 * in1) + (0.07706995 * in2) + (0.28547081 * in3) + (0.02292245 * in4) + (-0.21737456 * in5) + -0.09021676, 0)
HLchV0F_f55 = math.max((-0.10266186 * in0) + (-0.22212194 * in1) + (-0.15288307 * in2) + (-0.11512497 * in3) + (-0.20850590 * in4) + (-0.13912213 * in5) + 0.00000000, 0)
HLchV0F_f56 = math.max((0.09644815 * in0) + (-0.06331467 * in1) + (-0.52389133 * in2) + (0.25385776 * in3) + (0.14517780 * in4) + (-0.06538633 * in5) + 0.19241691, 0)
HLchV0F_f57 = math.max((-0.18968025 * in0) + (0.28581634 * in1) + (0.13081270 * in2) + (0.26215029 * in3) + (0.25683874 * in4) + (0.04790561 * in5) + -0.11394352, 0)
HLchV0F_f58 = math.max((-0.74767804 * in0) + (-0.11688079 * in1) + (0.17282291 * in2) + (-0.21154962 * in3) + (-0.29604617 * in4) + (0.16740614 * in5) + -0.05362126, 0)
HLchV0F_f59 = math.max((0.02332299 * in0) + (-0.17492379 * in1) + (-0.02861639 * in2) + (0.04902419 * in3) + (-0.13555007 * in4) + (-0.09365249 * in5) + -0.08077943, 0)
HLchV0F_f60 = math.max((-0.11509728 * in0) + (-0.20745684 * in1) + (0.14847142 * in2) + (0.01986832 * in3) + (0.07242652 * in4) + (-0.36913285 * in5) + 0.02751296, 0)
HLchV0F_f61 = math.max((-0.20432100 * in0) + (0.07895268 * in1) + (-0.18257244 * in2) + (-0.19163531 * in3) + (0.18382801 * in4) + (-0.02969003 * in5) + 0.22002734, 0)
HLchV0F_f62 = math.max((-0.04360337 * in0) + (-2.72150755 * in1) + (0.01720853 * in2) + (0.21716253 * in3) + (0.04222632 * in4) + (-0.19723588 * in5) + 0.13206188, 0)
HLchV0F_f63 = math.max((-0.20883851 * in0) + (-0.20468979 * in1) + (-0.03855988 * in2) + (0.21420479 * in3) + (-0.30769750 * in4) + (-0.04125502 * in5) + 0.32035661, 0)

// === Dense Output with ReLU ===
HLchV0F_out0 = math.max((0.67659080 * HLchV0F_f0) + (-0.20255792 * HLchV0F_f1) + (0.26918760 * HLchV0F_f2) + (-0.22641875 * HLchV0F_f3) + (-0.36443031 * HLchV0F_f4) + (0.06441532 * HLchV0F_f5) + (-0.00910694 * HLchV0F_f6) + (0.23502950 * HLchV0F_f7) + (-0.22701347 * HLchV0F_f8) + (-0.48643422 * HLchV0F_f9) + (-0.46131089 * HLchV0F_f10) + (-1.13429201 * HLchV0F_f11) + (0.38432765 * HLchV0F_f12) + (-0.27138874 * HLchV0F_f13) + (0.05490685 * HLchV0F_f14) + (0.67823565 * HLchV0F_f15) + (-0.34419987 * HLchV0F_f16) + (-0.51874328 * HLchV0F_f17) + (-1.26388431 * HLchV0F_f18) + (-0.17554520 * HLchV0F_f19) + (0.46594003 * HLchV0F_f20) + (0.17637834 * HLchV0F_f21) + (0.13777474 * HLchV0F_f22) + (0.61223799 * HLchV0F_f23) + (0.42377886 * HLchV0F_f24) + (-0.12364172 * HLchV0F_f25) + (0.42909727 * HLchV0F_f26) + (0.23765928 * HLchV0F_f27) + (-0.23085976 * HLchV0F_f28) + (0.09054032 * HLchV0F_f29) + (-0.15902190 * HLchV0F_f30) + (-0.03031497 * HLchV0F_f31) + (0.11311112 * HLchV0F_f32) + (-0.21636994 * HLchV0F_f33) + (-0.07036266 * HLchV0F_f34) + (-0.19696924 * HLchV0F_f35) + (0.02903632 * HLchV0F_f36) + (0.22817594 * HLchV0F_f37) + (0.36173075 * HLchV0F_f38) + (-0.04798830 * HLchV0F_f39) + (-0.48743761 * HLchV0F_f40) + (0.23235260 * HLchV0F_f41) + (0.41834989 * HLchV0F_f42) + (-0.23554504 * HLchV0F_f43) + (-0.16670661 * HLchV0F_f44) + (0.11127501 * HLchV0F_f45) + (-0.12124094 * HLchV0F_f46) + (-1.30214703 * HLchV0F_f47) + (0.36523470 * HLchV0F_f48) + (0.27513003 * HLchV0F_f49) + (0.27608538 * HLchV0F_f50) + (0.29384509 * HLchV0F_f51) + (0.02721029 * HLchV0F_f52) + (-0.19083691 * HLchV0F_f53) + (-0.08726298 * HLchV0F_f54) + (0.08766356 * HLchV0F_f55) + (0.11695346 * HLchV0F_f56) + (0.20331112 * HLchV0F_f57) + (0.15289304 * HLchV0F_f58) + (-0.11885005 * HLchV0F_f59) + (0.15038201 * HLchV0F_f60) + (0.17918225 * HLchV0F_f61) + (0.13150319 * HLchV0F_f62) + (0.21926677 * HLchV0F_f63) + 0.23166698, 0)
HLchV0F_out1 = math.max((0.05442106 * HLchV0F_f0) + (0.12204298 * HLchV0F_f1) + (-0.58039188 * HLchV0F_f2) + (0.05267471 * HLchV0F_f3) + (0.04504837 * HLchV0F_f4) + (-1.15364897 * HLchV0F_f5) + (0.54890418 * HLchV0F_f6) + (0.09863462 * HLchV0F_f7) + (-0.08864471 * HLchV0F_f8) + (0.35290483 * HLchV0F_f9) + (0.12522773 * HLchV0F_f10) + (-0.07734426 * HLchV0F_f11) + (-0.41185480 * HLchV0F_f12) + (-1.06428635 * HLchV0F_f13) + (-0.79992455 * HLchV0F_f14) + (0.14216326 * HLchV0F_f15) + (-0.23464540 * HLchV0F_f16) + (-0.07737034 * HLchV0F_f17) + (-0.05715527 * HLchV0F_f18) + (0.07624086 * HLchV0F_f19) + (0.39135793 * HLchV0F_f20) + (0.28499174 * HLchV0F_f21) + (0.13889284 * HLchV0F_f22) + (-0.01532676 * HLchV0F_f23) + (0.44936103 * HLchV0F_f24) + (0.01379996 * HLchV0F_f25) + (0.20489390 * HLchV0F_f26) + (0.22154884 * HLchV0F_f27) + (-0.49524584 * HLchV0F_f28) + (0.02909907 * HLchV0F_f29) + (0.07861439 * HLchV0F_f30) + (0.19888027 * HLchV0F_f31) + (0.11518660 * HLchV0F_f32) + (-0.33990231 * HLchV0F_f33) + (-0.96279329 * HLchV0F_f34) + (-0.17952238 * HLchV0F_f35) + (-0.10832049 * HLchV0F_f36) + (0.19190170 * HLchV0F_f37) + (0.35016721 * HLchV0F_f38) + (-0.25061065 * HLchV0F_f39) + (-1.31449604 * HLchV0F_f40) + (0.21575285 * HLchV0F_f41) + (0.19571668 * HLchV0F_f42) + (0.60031015 * HLchV0F_f43) + (0.02495613 * HLchV0F_f44) + (0.06478705 * HLchV0F_f45) + (0.26459703 * HLchV0F_f46) + (-0.11060914 * HLchV0F_f47) + (0.29664654 * HLchV0F_f48) + (0.19442339 * HLchV0F_f49) + (-0.28981844 * HLchV0F_f50) + (0.10582153 * HLchV0F_f51) + (0.22788309 * HLchV0F_f52) + (-1.16621232 * HLchV0F_f53) + (0.33675027 * HLchV0F_f54) + (0.09817445 * HLchV0F_f55) + (0.02433179 * HLchV0F_f56) + (-0.27245504 * HLchV0F_f57) + (-0.24642418 * HLchV0F_f58) + (-0.21260741 * HLchV0F_f59) + (0.02851873 * HLchV0F_f60) + (0.30315536 * HLchV0F_f61) + (0.48272702 * HLchV0F_f62) + (0.18210931 * HLchV0F_f63) + 0.20340475, 0)

// === Denormalize ===
next_high0 = HLchV0F_out0 * range_val + min_val
next_low0 = HLchV0F_out1 * range_val + min_val

// === Plot the Differences ===
plot(next_high0, title="Predicted High 0", color=color.new(color.blue, 0), linewidth=2, offset=1)
plot(next_low0, title="Predicted Low 0", color=color.new(color.purple, 0), linewidth=2, offset=1)
