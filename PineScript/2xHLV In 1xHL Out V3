// MIT License

// Copyright (c) 2025 Natchaphol Chumpanin

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//@version=5
indicator("2xHLV In 1xHL Out V3", overlay=true)

// IND-1hT50-ser_I2_H_L_chmV_ratioV_actNorm-Conv4_1-ReLU-Flat-Dense2-ReLU-O1F0H_L-b4e10-R2218

// === Input: 2 time steps Ã— 3 features ===
h1 = high[1], l1 = low[1], v1 = volume[1]
h0 = high,   l0 = low, v0 = volume

// === Normalize (MinMaxScaler logic) ===
min_val = math.min(math.min(h0, l0), math.min(h1, l1))
max_val = math.max(math.max(h0, l0), math.max(h1, l1))
range_val = math.max(max_val - min_val, 1e-3)

nh1 = (h1 - min_val) / range_val
nl1 = (l1 - min_val) / range_val
nh0 = (h0 - min_val) / range_val
nl0 = (l0 - min_val) / range_val
ivi = 0.5
nvc = 1.0

if (v1 < v0)
    ivi := 0
    nvc := v0 / math.max(1, v1)
else if (v1 > v0)
    ivi := 1
    nvc := v1 / math.max(1, v0)

// === Model Offset as 0 ===

// === Conv1D Output with ReLU ===
HLchmV0FactNorm_f0 = math.max((-0.10396864 * nh1) + (-0.18563758 * nl1) + (-0.39107215 * nh0) + (-0.59832031 * nl0) + (-0.60864848 * ivi) + (-0.01406472 * nvc) + -0.36471853, 0)
HLchmV0FactNorm_f1 = math.max((0.27548882 * nh1) + (0.31399649 * nl1) + (-0.46517730 * nh0) + (-0.66902411 * nl0) + (0.00984735 * ivi) + (-0.57302010 * nvc) + -0.02690855, 0)
HLchmV0FactNorm_f2 = math.max((-0.54450279 * nh1) + (-0.39620462 * nl1) + (0.60286552 * nh0) + (0.83916444 * nl0) + (0.04609270 * ivi) + (0.01285108 * nvc) + 0.96471655, 0)
HLchmV0FactNorm_f3 = math.max((0.04342718 * nh1) + (-0.63220280 * nl1) + (0.91935849 * nh0) + (-0.08230487 * nl0) + (-0.07281034 * ivi) + (0.00506952 * nvc) + -0.20944642, 0)

// === Dense Output with ReLU ===
HLchmV0FactNorm_out0 = math.max((0.50200403 * HLchmV0FactNorm_f0) + (0.77465415 * HLchmV0FactNorm_f1) + (0.08364661 * HLchmV0FactNorm_f2) + (0.27448791 * HLchmV0FactNorm_f3) + 0.44059819, 0)
HLchmV0FactNorm_out1 = math.max((0.60585016 * HLchmV0FactNorm_f0) + (0.63240105 * HLchmV0FactNorm_f1) + (0.33947664 * HLchmV0FactNorm_f2) + (-0.17237955 * HLchmV0FactNorm_f3) + 0.01716681, 0)

next_high0 = ((HLchmV0FactNorm_out0 * 2) - 0.5) * range_val + min_val
next_low0 = ((HLchmV0FactNorm_out1 * 2) - 0.5) * range_val + min_val

// === Plot the Differences ===
plot(next_high0, title="Predicted High 0", color=color.new(color.blue, 0), linewidth=2, offset=1)
plot(next_low0, title="Predicted Low 0", color=color.new(color.purple, 0), linewidth=2, offset=1)
